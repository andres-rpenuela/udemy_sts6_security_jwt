######################################
# NOMBRE DE LA APLICACION Y PUERTO   #
######################################
spring.application.name=api_spring_security_jwt
server.port=8082

############
##  BBDD  ##
############
# Configuracion de Hibernate para soportar Unicode/UTF-8
spring.jpa.properties.hibernate.connection.useUnicode=true
spring.jpa.properties.hibernate.connection.characterEncoding=utf-8
spring.jpa.properties.hibernate.connection.charSet=utf-8

# ANTI-PATTERN (NO RECOMENDABLE PARA PRODUCCION)
# Esto permite inicializar relaciones LAZY fuera de transacciones,
# pero puede ocultar errores de diseoo en produccion.
#spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

# Configuracion de la base de datos en memoria H2, simulando MySQL
spring.datasource.url=jdbc:h2:mem:testdb;MODE=MySQL;DATABASE_TO_UPPER=false;CASE_INSENSITIVE_IDENTIFIERS=TRUE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=sa
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Estrategia para manejar el schema de la BBDD:
# - create       -> crea al iniciar
# - create-drop  -> crea y elimina al parar
# - update       -> actualiza sin borrar datos
# - validate     -> valida que coincidan las entidades
spring.jpa.hibernate.ddl-auto=create-drop

# Estrategia de nombres de Hibernate:
# Esto fuerza a respetar literalmente lo que pongas en @Table(name="...")
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

###########################
## Consola de H2 en web  ##
###########################
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=false

###########################
## LOGGING DE QUERIES    ##
###########################
# Mostrar las queries SQL generadas
logging.level.org.hibernate.SQL=DEBUG
# Mostrar la inicializacion de scripts
logging.level.org.springframework.jdbc.datasource.init.ScriptUtils=DEBUG
# Mostrar los valores que se pasan como parametros en queries
logging.level.org.hibernate.orm.jdbc.bind=TRACE

###########################
## LOGGING DE SEGURIDAD  ##
###########################
# Logs de autenticacion (login/logout)
logging.level.org.springframework.security=DEBUG
# Logs de filtros de la cadena de seguridad
logging.level.org.springframework.security.web.FilterChainProxy=DEBUG
# Logs de decisiones de autorizacion (permitido/denegado)
logging.level.org.springframework.security.access=DEBUG
# Logs de eventos de autenticacion (AuthenticationManager, ProviderManager, etc.)
logging.level.org.springframework.security.authentication=DEBUG

########################################
## Inicializacion de scripts SQL       ##
########################################
# Con esto, Spring Boot carga automoticamente:
# - schema.sql
# - data-h2.sql
# - cualquier *-h2.sql (segun plataforma configurada)
spring.jpa.defer-datasource-initialization=true

# Estrategia de ejecucion de scripts:
# - embedded -> solo si la BD es en memoria (por defecto)
# - always   -> siempre ejecuta scripts (en memoria o externa)
# - never    -> nunca ejecuta scripts (util con Flyway/Liquibase)
spring.sql.init.mode=always

# Seleccion de scripts segun la plataforma: busca *-h2.sql
spring.sql.init.platform=h2

#admin/admin
spring.security.user.name=admin
spring.security.user.password=$2a$12$9q6clha7G6r4NrAfmoTJEuEoQ7jiunezwgqfb73nGkrI4H7kSrNjS